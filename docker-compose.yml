version: "3.8"

services:
  api:
    image: chat_dog_classification-api
    container_name: chat_dog_classification-api
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models        # Pour conserver les modÃ¨les
      - ./logs:/app/logs            # Pour les logs applicatifs
    networks:
      - mynetwork
    depends_on:
      - prometheus
      - grafana
    command: >
      uvicorn api.api:app
      --host 0.0.0.0
      --port 8000

  retrain:
    image: chat_dog_classification-retrain
    container_name: chat_dog_classification-retrain
    build: .
    command: ["python", "scripts/train_image_audio_fusion_retrain.py"]
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    networks:
      - mynetwork
    depends_on:
      - api

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - mynetwork

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana  # ðŸ§  Pour conserver les dashboards
    networks:
      - mynetwork

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    networks:
      - mynetwork

  tensorboard:
    image: tensorflow/tensorflow
    container_name: tensorboard
    command: ["tensorboard", "--logdir=/app/logs", "--host", "0.0.0.0"]
    ports:
      - "6006:6006"
    volumes:
      - ./logs:/app/logs
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  grafana-data:
