services:
  api:
    image: chat_dog_classification-api
    container_name: chat_dog_classification-api
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./models:/app/models  # ðŸ”¥ Permet de garder le modÃ¨le mÃªme aprÃ¨s un redÃ©marrage
      - ./logs:/app/logs      # ðŸ”¥ Stockage des logs d'entraÃ®nement
    networks:
      - mynetwork
    depends_on:
      - prometheus
      - grafana

  # --- ðŸ”¥ Service pour le rÃ©entraÃ®nement automatique ---
  retrain:
    image: chat_dog_classification-retrain
    container_name: chat_dog_classification-retrain
    build: .
    command: ["python", "scripts/train_image_audio_fusion_retrain.py"]
    volumes:
      - ./models:/app/models  # ðŸ”¥ Le modÃ¨le mis Ã  jour sera conservÃ©
      - ./logs:/app/logs
    networks:
      - mynetwork
    depends_on:
      - api

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - mynetwork

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - mynetwork

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
    ports:
      - "9093:9093"
    networks:
      - mynetwork

  tensorboard:
    image: tensorflow/tensorflow
    container_name: tensorboard
    volumes:
      - ./logs:/app/logs
    ports:
      - "6006:6006"
    command: ["tensorboard", "--logdir=/app/logs", "--host", "0.0.0.0"]
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge
