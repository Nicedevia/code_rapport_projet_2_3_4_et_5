import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
import pytest

from scripts.newmodel import CustomInputLayer
from tensorflow.keras.mixed_precision import Policy

# üîπ D√©finition du chemin du mod√®le (assurez-vous qu'il est bien g√©n√©r√© par l'entra√Ænement)
MODEL_PATH = "models/fusion.h5"

# --- üìå V√©rification que le mod√®le existe avant d'ex√©cuter les tests ---
@pytest.fixture(scope="module")
def model():
    if not os.path.exists(MODEL_PATH):
        pytest.fail(f"‚ùå Le mod√®le n'existe pas : {MODEL_PATH}")

    print(f"‚úÖ Chargement du mod√®le : {MODEL_PATH}")
    return load_model(
        MODEL_PATH,
        compile=False,
        custom_objects={
            "InputLayer": CustomInputLayer,
            "CustomInputLayer": CustomInputLayer,
            "DTypePolicy": Policy
        }
    )

# --- üìå Fonction de pr√©diction simplifi√©e pour le test ---
def predict(model, image_array, audio_array):
    """
    Effectue une pr√©diction avec le mod√®le en entr√©e.
    """
    prediction_proba = model.predict([
        np.expand_dims(image_array, axis=0),
        np.expand_dims(audio_array, axis=0)
    ])
    return int(np.argmax(prediction_proba, axis=1)[0])  # 0 = Chat, 1 = Chien, 2 = Erreur

# --- üìå Cas de test ---
def test_model_prediction(model):
    """
    Teste la pr√©diction du mod√®le avec des entr√©es factices.
    """
    fake_image = np.random.rand(64, 64, 1).astype(np.float32)
    fake_audio = np.random.rand(64, 64, 1).astype(np.float32)
    predicted_class = predict(model, fake_image, fake_audio)
    assert predicted_class in [0, 1, 2], f"‚ùå Classe pr√©dite invalide : {predicted_class}"
    print(f"‚úÖ Pr√©diction correcte : Classe {predicted_class}")

# --- üìå Test additionnel pour v√©rifier si le mod√®le est bien charg√© ---
def test_model_loading():
    """
    V√©rifie que le mod√®le se charge sans erreur.
    """
    try:
        model = load_model(
            MODEL_PATH,
            compile=False,
            custom_objects={
                "InputLayer": CustomInputLayer,
                "CustomInputLayer": CustomInputLayer,
                "DTypePolicy": Policy
            }
        )
        assert model is not None, "‚ùå √âchec du chargement du mod√®le."
        print("‚úÖ Mod√®le charg√© avec succ√®s !")
    except Exception as e:
        pytest.fail(f"‚ùå Erreur lors du chargement du mod√®le !: {e}")
