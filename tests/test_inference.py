import os
import numpy as np
import tensorflow as tf
import pytest

from scripts.newmodel import CustomInputLayer, build_fusion_model, load_pretrained_models

# üîπ D√©finition du chemin du mod√®le
MODEL_PATH = "models/fusion.h5"

# --- üìå V√©rification que le mod√®le existe avant d'ex√©cuter les tests ---
@pytest.fixture(scope="module")
def model():
    if not os.path.exists(MODEL_PATH):
        pytest.fail(f"‚ùå Le mod√®le n'existe pas : {MODEL_PATH}")

    print(f"‚úÖ Reconstruction du mod√®le puis chargement des poids depuis : {MODEL_PATH}")
    fusion_model = tf.keras.models.load_model(MODEL_PATH)

    # V√©rifiez que les entr√©es du mod√®le sont d√©finies
    if not fusion_model.inputs:
        dummy_image = tf.zeros((1, 64, 64, 1))
        dummy_audio = tf.zeros((1, 64, 64, 1))
        fusion_model([dummy_image, dummy_audio])

    return fusion_model

# --- üìå Fonction de pr√©diction simplifi√©e pour le test ---
def predict(model, image_array, audio_array):
    """
    Effectue une pr√©diction avec le mod√®le en entr√©e.
    """
    prediction_proba = model.predict([
        np.expand_dims(image_array, axis=0),
        np.expand_dims(audio_array, axis=0)
    ])
    return int(np.argmax(prediction_proba, axis=1)[0])  # 0 = Chat, 1 = Chien, 2 = Erreur

# --- üìå Cas de test ---
def test_model_prediction(model):
    """
    Teste la pr√©diction du mod√®le avec des entr√©es factices.
    """
    fake_image = np.random.rand(64, 64, 1).astype(np.float32)
    fake_audio = np.random.rand(64, 64, 1).astype(np.float32)
    predicted_class = predict(model, fake_image, fake_audio)
    assert predicted_class in [0, 1, 2], f"‚ùå Classe pr√©dite invalide : {predicted_class}"
    print(f"‚úÖ Pr√©diction correcte : Classe {predicted_class}")

# --- üìå Test additionnel pour v√©rifier si le mod√®le est bien charg√© ---
def test_model_loading():
    """
    V√©rifie que le mod√®le se charge sans erreur via reconstruction + poids.
    """
    try:
        image_model, audio_model = load_pretrained_models()
        fusion_model = build_fusion_model(image_model, audio_model)
        fusion_model.load_weights(MODEL_PATH)
        assert fusion_model is not None, "‚ùå √âchec de la reconstruction du mod√®le."
        print("‚úÖ Mod√®le reconstruit et charg√© avec succ√®s !")
    except Exception as e:
        pytest.fail(f"‚ùå Erreur lors de la reconstruction/chargement du mod√®le !: {e}")

    def re_save_individual_models():
    print("üîÑ Re-sauvegarde des mod√®les IMAGE et AUDIO avec input d√©fini...")
    image_model = tf.keras.models.load_model(IMAGE_MODEL_PATH)
    audio_model = tf.keras.models.load_model(AUDIO_MODEL_PATH)

    # D√©finir des entr√©es factices si n√©cessaire
    if not image_model.inputs:
        dummy_input = tf.zeros((1, 64, 64, 1))
        image_model(dummy_input)
    if not audio_model.inputs:
        dummy_input = tf.zeros((1, 64, 64, 1))
        audio_model(dummy_input)

    # Sauvegarder les mod√®les
    image_model.save("models/image_classifier_updated.keras")
    audio_model.save("models/audio_classifier_updated.keras")