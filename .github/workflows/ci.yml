name: CI/CD - Test, Build, Deploy & Monitor

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  # --- 🧪 Étape 1 : Exécution des tests unitaires ---
  test:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Cloner le repo
      uses: actions/checkout@v2

    - name: 🛠 Installer Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: 📦 Installer les dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest coverage

    - name: 🚀 Exécuter les tests avec pytest
      run: |
        pytest --maxfail=1 --disable-warnings -q

    - name: 📊 Générer le rapport de couverture
      run: |
        coverage run -m pytest
        coverage report -m

  # --- 📊 Étape 2 : Entraînement et Évaluation du Modèle ---
  train:
    needs: test  # Cette étape ne s'exécute que si les tests réussissent
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Cloner le repo
      uses: actions/checkout@v2

    - name: 🛠 Installer Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: 📦 Installer les dépendances
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔥 Entraîner le modèle
      run: |
        python scripts/train_model.py  # Vérifie que ce fichier existe

    - name: 📊 Générer le rapport d’évaluation
      run: |
        python scripts/evaluate_model.py > reports/model_report.txt

    - name: 📤 Sauvegarder le modèle entraîné
      uses: actions/upload-artifact@v3
      with:
        name: trained_model
        path: models/

  # --- 🐳 Étape 3 : Construction et Push de l'Image Docker ---
  build_and_push:
    needs: train
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Cloner le repo
      uses: actions/checkout@v2

    - name: 🛠 Construire l’image Docker
      run: |
        docker build -t monprojet/ia-api:latest .

    - name: 📤 Pousser l’image vers DockerHub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        docker tag monprojet/ia-api:latest monprojet/ia-api:v1.0
        docker push monprojet/ia-api:v1.0

  # --- 🚀 Étape 4 : Déploiement sur Serveur ---
  deploy:
    needs: build_and_push
    runs-on: ubuntu-latest

    steps:
    - name: 🔄 Se connecter au serveur via SSH
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASSWORD }}

    - name: 🚀 Déployer l’application
      run: |
        docker pull monprojet/ia-api:v1.0
        docker-compose down
        docker-compose up -d

  # --- 🔍 Étape 5 : Vérification des métriques et monitoring ---
  monitor:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
    - name: 📊 Vérifier l'état des métriques Prometheus
      run: |
        curl -X GET http://localhost:8000/metrics
